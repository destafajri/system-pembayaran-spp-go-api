// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/destafajri/system-pembayaran-spp-go-api/internal/repository (interfaces: UserRepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	time "time"

	entity "github.com/destafajri/system-pembayaran-spp-go-api/internal/domain/entity"
	model "github.com/destafajri/system-pembayaran-spp-go-api/internal/domain/model"
	meta "github.com/destafajri/system-pembayaran-spp-go-api/meta"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// ActivateGuru mocks base method.
func (m *MockUserRepository) ActivateGuru(arg0, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateGuru", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateGuru indicates an expected call of ActivateGuru.
func (mr *MockUserRepositoryMockRecorder) ActivateGuru(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateGuru", reflect.TypeOf((*MockUserRepository)(nil).ActivateGuru), arg0, arg1, arg2)
}

// ActivateSiswa mocks base method.
func (m *MockUserRepository) ActivateSiswa(arg0, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateSiswa", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateSiswa indicates an expected call of ActivateSiswa.
func (mr *MockUserRepositoryMockRecorder) ActivateSiswa(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateSiswa", reflect.TypeOf((*MockUserRepository)(nil).ActivateSiswa), arg0, arg1, arg2)
}

// ActivateUser mocks base method.
func (m *MockUserRepository) ActivateUser(arg0 string, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser.
func (mr *MockUserRepositoryMockRecorder) ActivateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockUserRepository)(nil).ActivateUser), arg0, arg1)
}

// CekUserExistByID mocks base method.
func (m *MockUserRepository) CekUserExistByID(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CekUserExistByID", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CekUserExistByID indicates an expected call of CekUserExistByID.
func (mr *MockUserRepositoryMockRecorder) CekUserExistByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CekUserExistByID", reflect.TypeOf((*MockUserRepository)(nil).CekUserExistByID), arg0)
}

// CreateAdmin mocks base method.
func (m *MockUserRepository) CreateAdmin(arg0 *entity.UserEntity) (*model.CreateAdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", arg0)
	ret0, _ := ret[0].(*model.CreateAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockUserRepositoryMockRecorder) CreateAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockUserRepository)(nil).CreateAdmin), arg0)
}

// DeactivateGuru mocks base method.
func (m *MockUserRepository) DeactivateGuru(arg0, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateGuru", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateGuru indicates an expected call of DeactivateGuru.
func (mr *MockUserRepositoryMockRecorder) DeactivateGuru(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateGuru", reflect.TypeOf((*MockUserRepository)(nil).DeactivateGuru), arg0, arg1, arg2)
}

// DeactivateSiswa mocks base method.
func (m *MockUserRepository) DeactivateSiswa(arg0, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateSiswa", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateSiswa indicates an expected call of DeactivateSiswa.
func (mr *MockUserRepositoryMockRecorder) DeactivateSiswa(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateSiswa", reflect.TypeOf((*MockUserRepository)(nil).DeactivateSiswa), arg0, arg1, arg2)
}

// DeactivateUser mocks base method.
func (m *MockUserRepository) DeactivateUser(arg0 string, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateUser indicates an expected call of DeactivateUser.
func (mr *MockUserRepositoryMockRecorder) DeactivateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateUser", reflect.TypeOf((*MockUserRepository)(nil).DeactivateUser), arg0, arg1)
}

// GetDetailUser mocks base method.
func (m *MockUserRepository) GetDetailUser(arg0 string) (*model.GetDetailUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailUser", arg0)
	ret0, _ := ret[0].(*model.GetDetailUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailUser indicates an expected call of GetDetailUser.
func (mr *MockUserRepositoryMockRecorder) GetDetailUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailUser", reflect.TypeOf((*MockUserRepository)(nil).GetDetailUser), arg0)
}

// GetGuruID mocks base method.
func (m *MockUserRepository) GetGuruID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuruID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuruID indicates an expected call of GetGuruID.
func (mr *MockUserRepositoryMockRecorder) GetGuruID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuruID", reflect.TypeOf((*MockUserRepository)(nil).GetGuruID), arg0)
}

// GetListUser mocks base method.
func (m *MockUserRepository) GetListUser(arg0 *meta.Metadata) ([]model.GetListUserResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListUser", arg0)
	ret0, _ := ret[0].([]model.GetListUserResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListUser indicates an expected call of GetListUser.
func (mr *MockUserRepositoryMockRecorder) GetListUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListUser", reflect.TypeOf((*MockUserRepository)(nil).GetListUser), arg0)
}

// GetRoleInformation mocks base method.
func (m *MockUserRepository) GetRoleInformation(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleInformation", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleInformation indicates an expected call of GetRoleInformation.
func (mr *MockUserRepositoryMockRecorder) GetRoleInformation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleInformation", reflect.TypeOf((*MockUserRepository)(nil).GetRoleInformation), arg0)
}

// GetSiswaID mocks base method.
func (m *MockUserRepository) GetSiswaID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiswaID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiswaID indicates an expected call of GetSiswaID.
func (mr *MockUserRepositoryMockRecorder) GetSiswaID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiswaID", reflect.TypeOf((*MockUserRepository)(nil).GetSiswaID), arg0)
}

// Login mocks base method.
func (m *MockUserRepository) Login(arg0 string) (*entity.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(*entity.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserRepositoryMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserRepository)(nil).Login), arg0)
}
